(function(algolia) {
  'use strict';
  var aa = algolia.externals.aa;

  var enabled = algolia.config.analytics_enabled;
  if (!enabled) return;
  
  var ALGOLIA_INSIGHTS_SRC = "https://cdn.jsdelivr.net/npm/search-insights@1.6.2";

  !function(e,a,t,n,s,i,c){e.AlgoliaAnalyticsObject=s,e[s]=e[s]||function(){
  (e[s].queue=e[s].queue||[]).push(arguments)},i=a.createElement(t),c=a.getElementsByTagName(t)[0],
  i.async=1,i.src=n,c.parentNode.insertBefore(i,c)
  }(window,document,"script",ALGOLIA_INSIGHTS_SRC,"aa");

  aa.init({
    appId: algolia.config.app_id,
    apiKey: algolia.config.search_api_key,
  });
  
  var retries = 0;
  function setupUserToken() {
    if(ShopifyAnalytics.lib.user === undefined && retries++ < 10) {
      return setTimeout(setupUserToken, 500);
    }
    
    if (typeof ShopifyAnalytics.lib.user().id === 'function') {
      aa.setUserToken(ShopifyAnalytics.lib.user().id());
    } else {
      aa.setUserToken(ShopifyAnalytics.lib.user().traits().uniqToken);
    }
  }
  setupUserToken();

  const localStorageKey = 'algolia_analytics_clicked_objects';

  /**
   * Saves details in local storage for conversion tracking
   */
  algolia.saveForConversionTracking = function (data) {
    /**
     * We're using a try, catch here to handle any possible exceptions
     * resulting from local storage or JSON parsing.
     */
    try {
      // Get any data previously stored
      const previousClickItemsString = localStorage.getItem(localStorageKey) || '[]';
      const previousClickItems = JSON.parse(previousClickItemsString);

      var conversionData = data;

      // Changing the event to 'convert' from 'click'
      conversionData.eventName = 'Product Purchased';

      // Add the current products data to local storage
      previousClickItems.push(conversionData)
      localStorage.setItem(localStorageKey, JSON.stringify(previousClickItems))
    } catch (error) {
      // No need to do anything in this scenario
    }
  };
})(window.algoliaShopify);
